package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"syscall"
)

func main() {
	reader := bufio.NewReader(os.Stdin)
	for {
		printPrompt()
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		if input == "" {
			continue
		}
		executeInput(input)
	}
}

func printPrompt() {
	cwd, err := os.Getwd()
	if err != nil {
		cwd = "unknown"
	}
	fmt.Printf("%s$ ", cwd)
}

func executeInput(input string) {
	args := strings.Fields(input)
	cmd := args[0]
	switch cmd {
	case "exit":
		os.Exit(0)
	case "pwd":
		pwd()
	case "cd":
		cd(args)
	case "mkdir":
		mkdir(args)
	case "ls":
		ls()
	case "touch":
		touch(args)
	case "rm":
		rm(args)
	case "echo":
		echo(args)
	case "cat":
		cat(args)
	case "clear":
		clear()
	default:
		executeCommand(args)
	}
}

func pwd() {
	dir, _ := os.Getwd()
	fmt.Println(dir)
}

func cd(args []string) {
	if len(args) < 2 {
		fmt.Println("cd: missing operand")
		return
	}
	if err := os.Chdir(args[1]); err != nil {
		fmt.Println("cd:", err)
	}
}

func mkdir(args []string) {
	if len(args) < 2 {
		fmt.Println("mkdir: missing operand")
		return
	}
	if err := os.Mkdir(args[1], 0755); err != nil {
		fmt.Println("mkdir:", err)
	}
}

func ls() {
	files, _ := os.ReadDir(".")
	for _, file := range files {
		fmt.Println(file.Name())
	}
}

func touch(args []string) {
	if len(args) < 2 {
		fmt.Println("touch: missing operand")
		return
	}
	file, _ := os.Create(args[1])
	file.Close()
}

func rm(args []string) {
	if len(args) < 2 {
		fmt.Println("rm: missing operand")
		return
	}
	os.Remove(args[1])
}

func echo(args []string) {
	fmt.Println(strings.Join(args[1:], " "))
}

func cat(args []string) {
	if len(args) < 2 {
		fmt.Println("cat: missing operand")
		return
	}
	data, err := os.ReadFile(args[1])
	if err != nil {
		fmt.Println("cat:", err)
		return
	}
	fmt.Print(string(data))
}

func clear() {
	cmd := exec.Command("clear")
	cmd.Stdout = os.Stdout
	cmd.Run()
}

func executeCommand(args []string) {
	cmd := exec.Command(args[0], args[1:]...)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Stdin = os.Stdin
	err := cmd.Run()
	if err != nil {
		fmt.Println("Command execution error:", err)
	}
}

